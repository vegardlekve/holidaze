{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vegar\\\\OneDrive\\\\Dokumenter\\\\GitHub\\\\holidaze\\\\holidaze\\\\src\\\\pages\\\\register\\\\index.jsx\",\n  _s = $RefreshSig$();\n/*import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst API_URL = \"https://api.noroff.dev/api/v1/holidaze/auth/register\";\r\n\r\nexport const Register = () => {\r\n    const history = useHistory();\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [avatar, setAvatar] = useState(\"\");\r\n    const [venueManager, setVenueManager] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const userData = {\r\n                name,\r\n                email,\r\n                password,\r\n                avatar,\r\n                venueManager,\r\n            };\r\n\r\n            // Perform validation checks before making the API request\r\n            if (!isValidName(name)) {\r\n                throw new Error(\"Invalid name format.\");\r\n            }\r\n\r\n            if (!isValidEmail(email)) {\r\n                throw new Error(\"Invalid email address.\");\r\n            }\r\n\r\n            if (!isValidPassword(password)) {\r\n                throw new Error(\r\n                    \"Invalid password. It must be at least 8 characters.\"\r\n                );\r\n            }\r\n\r\n            if (avatar && !isValidUrl(avatar)) {\r\n                throw new Error(\"Invalid avatar URL.\");\r\n            }\r\n\r\n            const response = await fetch(API_URL, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(userData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message);\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n        }\r\n    };\r\n\r\n    const isValidName = (name) => {\r\n        const regex = /^[a-zA-Z0-9_]+$/;\r\n        return regex.test(name);\r\n    };\r\n\r\n    const isValidEmail = (email) => {\r\n        const regex = /^[a-zA-Z0-9._%+-]+@(stud\\.)?noroff\\.no$/;\r\n        return regex.test(email);\r\n    };\r\n\r\n    const isValidPassword = (password) => {\r\n        return password.length >= 8;\r\n    };\r\n\r\n    const isValidUrl = (url) => {\r\n        try {\r\n            new URL(url);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    setSuccessMessage(\r\n        \"ðŸŽˆ Registration successful. Redirecting to login page...ðŸŽˆ\"\r\n    );\r\n\r\n    setTimeout(() => {\r\n        history.push(\"/login\");\r\n    }, 2000);\r\n\r\n    */\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://api.noroff.dev/api/v1/holidaze/auth/register\";\nexport const Register = () => {\n  _s();\n  const history = useHistory();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [avatar, setAvatar] = useState(\"\");\n  const [venueManager, setVenueManager] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const userData = {\n        name,\n        email,\n        password,\n        avatar,\n        venueManager\n      };\n\n      // Perform validation checks before making the API request\n      if (!isValidName(name)) {\n        throw new Error(\"Invalid name format.\");\n      }\n      if (!isValidEmail(email)) {\n        throw new Error(\"Invalid email address.\");\n      }\n      if (!isValidPassword(password)) {\n        throw new Error(\"Invalid password. It must be at least 8 characters.\");\n      }\n      if (avatar && !isValidUrl(avatar)) {\n        throw new Error(\"Invalid avatar URL.\");\n      }\n      const response = await fetch(API_URL, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n      setErrorMessage(\"\");\n      setSuccessMessage(\"ðŸŽˆ Registration successful. Redirecting to login page...ðŸŽˆ\");\n      setTimeout(() => {\n        history.push(\"/login\");\n      }, 2000);\n    } catch (error) {\n      setErrorMessage(error.message);\n    }\n  };\n  const isValidName = name => {\n    const regex = /^[a-zA-Z0-9_]+$/;\n    return regex.test(name);\n  };\n  const isValidEmail = email => {\n    const regex = /^[a-zA-Z0-9._%+-]+@(stud\\.)?noroff\\.no$/;\n    return regex.test(email);\n  };\n  const isValidPassword = password => {\n    return password.length >= 8;\n  };\n  const isValidUrl = url => {\n    try {\n      new URL(url);\n      return true;\n    } catch (error) {\n      return false;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(RegisterForm, {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 30\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: email,\n        onChange: e => setEmail(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"password\",\n        children: \"Password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        id: \"password\",\n        value: password,\n        onChange: e => setPassword(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"avatar\",\n        children: \"Avatar:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"avatar\",\n        value: avatar,\n        onChange: e => setAvatar(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"venueManager\",\n        children: \"Venue Manager:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        id: \"venueManager\",\n        checked: venueManager,\n        onChange: e => setVenueManager(e.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FormField, {\n      children: /*#__PURE__*/_jsxDEV(SubmitButton, {\n        type: \"submit\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"fqfUMy1qDwo0W4BHtktXuBZ70LA=\", false, function () {\n  return [useHistory];\n});\n_c = Register;\nconst RegisterForm = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\n_c2 = RegisterForm;\nconst FormField = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 1rem;\n\n    label {\n        margin-bottom: 0.5rem;\n    }\n\n    input {\n        padding: 0.5rem;\n        width: 50vh;\n\n        &:focus {\n            outline: none;\n        }\n    }\n`;\n_c3 = FormField;\nconst SubmitButton = styled.button`\n    padding: 0.5rem 1rem;\n    color: white;\n    width: 50vh;\n    text-align: center;\n    border-radius: 10px;\n`;\n_c4 = SubmitButton;\nconst ErrorMessage = styled.div`\n    color: red;\n    margin-bottom: 1rem;\n`;\n_c5 = ErrorMessage;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Register\");\n$RefreshReg$(_c2, \"RegisterForm\");\n$RefreshReg$(_c3, \"FormField\");\n$RefreshReg$(_c4, \"SubmitButton\");\n$RefreshReg$(_c5, \"ErrorMessage\");","map":{"version":3,"names":["React","useState","useHistory","styled","jsxDEV","_jsxDEV","API_URL","Register","_s","history","name","setName","email","setEmail","password","setPassword","avatar","setAvatar","venueManager","setVenueManager","errorMessage","setErrorMessage","handleSubmit","e","preventDefault","userData","isValidName","Error","isValidEmail","isValidPassword","isValidUrl","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","message","setSuccessMessage","setTimeout","push","error","regex","test","length","url","URL","RegisterForm","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","ErrorMessage","FormField","htmlFor","type","id","value","onChange","target","required","checked","SubmitButton","_c","form","_c2","div","_c3","button","_c4","_c5","$RefreshReg$"],"sources":["C:/Users/vegar/OneDrive/Dokumenter/GitHub/holidaze/holidaze/src/pages/register/index.jsx"],"sourcesContent":["/*import React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst API_URL = \"https://api.noroff.dev/api/v1/holidaze/auth/register\";\r\n\r\nexport const Register = () => {\r\n    const history = useHistory();\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [avatar, setAvatar] = useState(\"\");\r\n    const [venueManager, setVenueManager] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    const [successMessage, setSuccessMessage] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const userData = {\r\n                name,\r\n                email,\r\n                password,\r\n                avatar,\r\n                venueManager,\r\n            };\r\n\r\n            // Perform validation checks before making the API request\r\n            if (!isValidName(name)) {\r\n                throw new Error(\"Invalid name format.\");\r\n            }\r\n\r\n            if (!isValidEmail(email)) {\r\n                throw new Error(\"Invalid email address.\");\r\n            }\r\n\r\n            if (!isValidPassword(password)) {\r\n                throw new Error(\r\n                    \"Invalid password. It must be at least 8 characters.\"\r\n                );\r\n            }\r\n\r\n            if (avatar && !isValidUrl(avatar)) {\r\n                throw new Error(\"Invalid avatar URL.\");\r\n            }\r\n\r\n            const response = await fetch(API_URL, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(userData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message);\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n        }\r\n    };\r\n\r\n    const isValidName = (name) => {\r\n        const regex = /^[a-zA-Z0-9_]+$/;\r\n        return regex.test(name);\r\n    };\r\n\r\n    const isValidEmail = (email) => {\r\n        const regex = /^[a-zA-Z0-9._%+-]+@(stud\\.)?noroff\\.no$/;\r\n        return regex.test(email);\r\n    };\r\n\r\n    const isValidPassword = (password) => {\r\n        return password.length >= 8;\r\n    };\r\n\r\n    const isValidUrl = (url) => {\r\n        try {\r\n            new URL(url);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    setSuccessMessage(\r\n        \"ðŸŽˆ Registration successful. Redirecting to login page...ðŸŽˆ\"\r\n    );\r\n\r\n    setTimeout(() => {\r\n        history.push(\"/login\");\r\n    }, 2000);\r\n\r\n    */\r\n\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nconst API_URL = \"https://api.noroff.dev/api/v1/holidaze/auth/register\";\r\n\r\nexport const Register = () => {\r\n    const history = useHistory();\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [avatar, setAvatar] = useState(\"\");\r\n    const [venueManager, setVenueManager] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const userData = {\r\n                name,\r\n                email,\r\n                password,\r\n                avatar,\r\n                venueManager,\r\n            };\r\n\r\n            // Perform validation checks before making the API request\r\n            if (!isValidName(name)) {\r\n                throw new Error(\"Invalid name format.\");\r\n            }\r\n\r\n            if (!isValidEmail(email)) {\r\n                throw new Error(\"Invalid email address.\");\r\n            }\r\n\r\n            if (!isValidPassword(password)) {\r\n                throw new Error(\r\n                    \"Invalid password. It must be at least 8 characters.\"\r\n                );\r\n            }\r\n\r\n            if (avatar && !isValidUrl(avatar)) {\r\n                throw new Error(\"Invalid avatar URL.\");\r\n            }\r\n\r\n            const response = await fetch(API_URL, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(userData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.message);\r\n            }\r\n\r\n            setErrorMessage(\"\");\r\n            setSuccessMessage(\r\n                \"ðŸŽˆ Registration successful. Redirecting to login page...ðŸŽˆ\"\r\n            );\r\n\r\n            setTimeout(() => {\r\n                history.push(\"/login\");\r\n            }, 2000);\r\n        } catch (error) {\r\n            setErrorMessage(error.message);\r\n        }\r\n    };\r\n\r\n    const isValidName = (name) => {\r\n        const regex = /^[a-zA-Z0-9_]+$/;\r\n        return regex.test(name);\r\n    };\r\n\r\n    const isValidEmail = (email) => {\r\n        const regex = /^[a-zA-Z0-9._%+-]+@(stud\\.)?noroff\\.no$/;\r\n        return regex.test(email);\r\n    };\r\n\r\n    const isValidPassword = (password) => {\r\n        return password.length >= 8;\r\n    };\r\n\r\n    const isValidUrl = (url) => {\r\n        try {\r\n            new URL(url);\r\n            return true;\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <RegisterForm onSubmit={handleSubmit}>\r\n            <h2>Register</h2>\r\n            {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\r\n            <FormField>\r\n                <label htmlFor=\"name\">Name:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    value={name}\r\n                    onChange={(e) => setName(e.target.value)}\r\n                    required\r\n                />\r\n            </FormField>\r\n            <FormField>\r\n                <label htmlFor=\"email\">Email:</label>\r\n                <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    required\r\n                />\r\n            </FormField>\r\n            <FormField>\r\n                <label htmlFor=\"password\">Password:</label>\r\n                <input\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.target.value)}\r\n                    required\r\n                />\r\n            </FormField>\r\n            <FormField>\r\n                <label htmlFor=\"avatar\">Avatar:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"avatar\"\r\n                    value={avatar}\r\n                    onChange={(e) => setAvatar(e.target.value)}\r\n                />\r\n            </FormField>\r\n            <FormField>\r\n                <label htmlFor=\"venueManager\">Venue Manager:</label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    id=\"venueManager\"\r\n                    checked={venueManager}\r\n                    onChange={(e) => setVenueManager(e.target.checked)}\r\n                />\r\n            </FormField>\r\n            <FormField>\r\n                <SubmitButton type=\"submit\">Register</SubmitButton>\r\n            </FormField>\r\n        </RegisterForm>\r\n    );\r\n};\r\n\r\nconst RegisterForm = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n`;\r\n\r\nconst FormField = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-bottom: 1rem;\r\n\r\n    label {\r\n        margin-bottom: 0.5rem;\r\n    }\r\n\r\n    input {\r\n        padding: 0.5rem;\r\n        width: 50vh;\r\n\r\n        &:focus {\r\n            outline: none;\r\n        }\r\n    }\r\n`;\r\n\r\nconst SubmitButton = styled.button`\r\n    padding: 0.5rem 1rem;\r\n    color: white;\r\n    width: 50vh;\r\n    text-align: center;\r\n    border-radius: 10px;\r\n`;\r\n\r\nconst ErrorMessage = styled.div`\r\n    color: red;\r\n    margin-bottom: 1rem;\r\n`;\r\n"],"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}