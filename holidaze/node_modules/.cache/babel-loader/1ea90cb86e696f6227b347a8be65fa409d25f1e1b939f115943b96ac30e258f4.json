{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nexport default function DataSetup(url) {\n  _s();\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    async function getData() {\n      try {\n        setIsLoading(true);\n        setIsError(false);\n        const fetchedData = await fetch(url);\n        const responseData = await fetchedData.json();\n        if (Array.isArray(responseData)) {\n          setData(responseData);\n        } else if (typeof responseData === \"object\") {\n          const dataArray = Object.values(responseData);\n          setData(dataArray);\n        } else {\n          throw new Error(\"Invalid data format\");\n        }\n      } catch (error) {\n        console.log(error);\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getData();\n  }, [url]);\n  return {\n    data,\n    isLoading,\n    isError\n  };\n}\n_s(DataSetup, \"6EDkcU5PbuSsesaofET2GVZ0HMs=\");\n_c = DataSetup;\nvar _c;\n$RefreshReg$(_c, \"DataSetup\");","map":{"version":3,"names":["useState","useEffect","DataSetup","url","_s","data","setData","isLoading","setIsLoading","isError","setIsError","getData","fetchedData","fetch","responseData","json","Array","isArray","dataArray","Object","values","Error","error","console","log","_c","$RefreshReg$"],"sources":["C:/Users/vegar/OneDrive/Dokumenter/GitHub/holidaze/holidaze/src/hooks/dataSetup.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nexport default function DataSetup(url) {\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isError, setIsError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        async function getData() {\r\n            try {\r\n                setIsLoading(true);\r\n                setIsError(false);\r\n                const fetchedData = await fetch(url);\r\n                const responseData = await fetchedData.json();\r\n\r\n                if (Array.isArray(responseData)) {\r\n                    setData(responseData);\r\n                } else if (typeof responseData === \"object\") {\r\n                    const dataArray = Object.values(responseData);\r\n                    setData(dataArray);\r\n                } else {\r\n                    throw new Error(\"Invalid data format\");\r\n                }\r\n            } catch (error) {\r\n                console.log(error);\r\n                setIsError(true);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        }\r\n\r\n        getData();\r\n    }, [url]);\r\n\r\n    return { data, isLoading, isError };\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,eAAe,SAASC,SAASA,CAACC,GAAG,EAAE;EAAAC,EAAA;EACnC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACZ,eAAeU,OAAOA,CAAA,EAAG;MACrB,IAAI;QACAH,YAAY,CAAC,IAAI,CAAC;QAClBE,UAAU,CAAC,KAAK,CAAC;QACjB,MAAME,WAAW,GAAG,MAAMC,KAAK,CAACV,GAAG,CAAC;QACpC,MAAMW,YAAY,GAAG,MAAMF,WAAW,CAACG,IAAI,CAAC,CAAC;QAE7C,IAAIC,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;UAC7BR,OAAO,CAACQ,YAAY,CAAC;QACzB,CAAC,MAAM,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;UACzC,MAAMI,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACN,YAAY,CAAC;UAC7CR,OAAO,CAACY,SAAS,CAAC;QACtB,CAAC,MAAM;UACH,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;QAC1C;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClBZ,UAAU,CAAC,IAAI,CAAC;MACpB,CAAC,SAAS;QACNF,YAAY,CAAC,KAAK,CAAC;MACvB;IACJ;IAEAG,OAAO,CAAC,CAAC;EACb,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,SAAS;IAAEE;EAAQ,CAAC;AACvC;AAACL,EAAA,CAjCuBF,SAAS;AAAAuB,EAAA,GAATvB,SAAS;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}